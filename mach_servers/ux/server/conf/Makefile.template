#
# Mach Operating System
# Copyright (c) 1989 Carnegie-Mellon University
# Copyright (c) 1988 Carnegie-Mellon University
# Copyright (c) 1987 Carnegie-Mellon University
# Copyright (c) 1986 Carnegie-Mellon University
# All rights reserved.  The CMU software License Agreement specifies
# the terms and conditions for use and redistribution.
#  
# HISTORY
# $Log:	Makefile.template,v $
# Revision 2.6  91/09/03  11:12:12  jsb
# 	Added support for cross-compilation, using existing KCC technology:
# 	KCC is used to build images to be run on target machine (machine
# 	for which kernel is being built), and CC is used to build images
# 	to be run on host machine (machine upon which compilation is done).
# 	Use KCC (not CC) to build vers.o. Use CC (not KCC) to build
# 	bsd_types_gen. Ignore errors from size command.
# 	[91/09/02  14:16:45  jsb]
# 
# Revision 2.5  90/06/19  23:10:23  rpd
# 	Added uxkern/bsd_2.defs rules.
# 	[90/06/09            rpd]
# 
# 	Removed FORCE_VOLATILE, added VOLATILE to DEFINES.
# 	[90/06/06            rpd]
# 
# Revision 2.4  90/06/02  15:23:06  rpd
# 	Added rules for default_pager_object.defs.
# 	[90/05/03            rpd]
# 	Don't barf if xstrip fails.
# 	[90/05/02            rpd]
# 
# 	From jsb: don't rearrange symbols.
# 	Use xstrip instead of -x.
# 	[90/04/23            rpd]
# 
# 	Removed inode pager's dependency on memory_object_default_server.c.
# 	[90/03/28            rpd]
# 	Define DEFINES.  Compile everything with -DMACH_IPC_COMPAT=0.
# 	Added explicit rules for running mig.
# 	[90/03/26  19:43:40  rpd]
# 
# Revision 2.3  90/03/14  21:27:27  rwd
# 	Added rules for default_pager_object_user
# 	[90/01/22            rwd]
# 
# Revision 2.2  89/11/29  15:28:19  af
# 	Fix to build with standard kernel make scripts.  Add rules to
# 	build memory_object.c and memory_object_default.c.
# 	[89/05/24            dbg]
# 
# 	Add bsd_1.defs.
# 	[89/04/07            dbg]
# 
# 	Out-of-kernel version.  Remove locore.
# 	[89/01/03            dbg]
# 
# Revision 2.1  89/08/04  15:26:33  rwd
# Created.
# 
# Revision 2.25  89/02/25  17:39:48  gm0w
# 	Removed obsolete rules for links, tags, printing, etc.
# 	[89/02/19            rpd]
# 
# 	Added MIG_BOGUS_FILES and rules to create the bogus files.
# 	The Mig-generated files use these old names.
# 	[89/02/19            rpd]
# 
# 	Converted migfiles/migdebugfiles rules to new format.
# 	[89/02/18            rpd]
# 
# Revision 2.24  89/01/31  01:50:24  rpd
# 	Picked up dlb's migfiles/migdebugfiles changes, but flushed
# 	the mach_host additions.  (They will get merged later.)
# 	[89/01/31            rpd]
# 
# 	Add mach_host.defs and related files.
# 	Add intermediate targets to kick off interface mig runs early.
# 	[89/01/25            dlb]
# 
# Revision 2.23  89/01/24  17:00:55  af
# 	Fixed the broken set of rules for mach_debug.   No comment.
# 
# Revision 2.22  89/01/23  22:16:16  af
# 	The basic change is that locore.s and ioconf.c are no longer
# 	special cased.  ioconf.c is now specified in files.  If you need
# 	some special treatment for locore.s, then do it in the machine
# 	dependent Makefile rules.  These changes were necessary to be
# 	more general in order to accomodate mips.
# 	
# 	The %<foo> order was changed to have %MACHDEP last.  So
# 	that it could have rules that depended on SOBJS and COBJS.
# 	
# 	"makevariables" get emitted after the %MACHDEP expansion.
# 	This means that the %MACHDEP can have variables that overide the
# 	defaults in the Makefile.template and that a given configuration
# 	file can overide the variables in the %MACHDEP (local Makefile).
# 	This works wonderfully for gcc.
# 	
# 	The text following a "|" in the files file, will be
# 	emitted as part of the rule for the given file.
# 	
# 	Lastly, you might want to look at the comments in the src/config
# 	program, especially in mkmakefile.c
# 	[89/01/09            rvb]
# 
#
# Revision 2.21  89/01/15  16:19:56  rpd
# 	Moved interfaces from kern/ to mach/.
# 	Moved rules for the mach_debug_ca interface to Makefile.ca.
# 	[89/01/15  14:53:06  rpd]
# 
# Revision 2.20  89/01/12  07:42:30  rpd
# 	Updated for new Mig files in kern/, mach_debug/, ca/ directories.
# 	[89/01/12  04:34:35  rpd]
# 
# Revision 2.19  88/12/19  02:40:21  mwyoung
# 	Split out ALLOPTS from old LINTOPTS, and provide VOLATILE only
# 	for lint.  I'm not sure why it's not safe to always use
# 	VOLATILE, but Bob didn't set things up that way.
# 	[88/12/19            mwyoung]
# 	
# 	Add volatile definition for lint.  It should be machine-dependent,
# 	but all forms of lint are based on pcc currently.
# 	[88/12/17            mwyoung]
# 
# Revision 2.18  88/11/23  16:35:34  rpd
# 	Added comments explaining PRELDDEPS.
# 	[88/11/05  13:45:58  rpd]
# 
# Revision 2.17  88/10/20  18:19:42  mwyoung
# 	Move the "default" target ahead of .PRECIOUS.
# 	[88/10/18            mwyoung]
# 
# Revision 2.16  88/10/18  03:17:29  mwyoung
# 	Update Makefile (with "md") only upon exit.
# 	[88/10/17            mwyoung]
# 
# Revision 2.15  88/09/07  15:47:41  rpd
# 	Explicitly use generated make script when checking dependencies.
# 	[88/09/05  21:32:22  rpd]
# 
# Revision 2.14  88/08/06  18:07:21  rpd
# Convert to use new memory_object files.
# No longer need -I flags, because the generated make script
# does it all with CPATH.
# 
# Revision 2.13  88/07/17  20:38:52  mwyoung
# Fix typo in previous change.
# 
# Revision 2.12  88/07/17  20:28:25  mwyoung
# Add mach_types.defs to the list of things to get from kern/.
# 
# Revision 2.11  88/07/17  18:48:49  mwyoung
# Convert to use new memory_object files.
# 
# Revision 2.10  88/07/15  15:48:26  mja
# Don't reset CPATH here since it is now set in the calling
# ./make script to track VPATH;  pass ../conf/copyright to
# ../conf/newvers.sh for VPATH;  define MD variable;  correct
# dependencies on kern/* and replace wildcards with explicit
# names all for VPATH.
# 
# 20-Jun-88  Michael Young (mwyoung) at Carnegie-Mellon University
#	Always remove and rebuild kern/ when dependencies change.
#
# 17-Jun-88  Michael Young (mwyoung) at Carnegie-Mellon University
#	More dependencies on kern/ files.
#
# 11-Jun-88  Michael Young (mwyoung) at Carnegie-Mellon University
#	Simplify B_RULEs to decode directly from the source directory.
#
#  7-Jun-88  Michael Young (mwyoung) at Carnegie-Mellon University
#	Build MiG-generated interfaces in the build directory.
#	Unfortunately, the generated file "mach.h" conflicts with the
#	option file of the same name, so the interfaces get built in a
#	subdirectory.
#
#  7-Jun-88  Michael Young (mwyoung) at Carnegie-Mellon University
#	Decode binary (".b") files into object files.
#
#  2-Jun-88  Michael Young (mwyoung) at Carnegie-Mellon University
#	Temporarily added rules to make "strings.h" until MiG can be
#	convinced not to include it unless strings are being used.
#
# 18-May-88  Mike Accetta (mja) at Carnegie-Mellon University
#	Add .PRECIOUS target to prevent Makefile from ever being
#	deleted on interrupt.
#	[ V5.1(XF25) ]
#
# 09-Apr-88  Mike Accetta (mja) at Carnegie-Mellon University
#	Corrected object and binary rules to permit errors and remove
#	target before copying in new version (in case it is not
#	writeable);  added version file for patch level;  changed "md"
#	invocation to simply wildcard all files rather than only those
#	newer than "Makefile" since this can often cause files to be
#	overlooked if "Makefile" is touched before they are
#	incorporated.
#	[ V5.1(XF23) ]
#
# 31-Mar-88  Michael Young (mwyoung) at Carnegie-Mellon University
#	Allow source directory to be other than "..".
#
# 31-Mar-88  Robert Baron (rvb) at Carnegie-Mellon University
#	Need to have ${VOLATILE} for genassym
#
# 28-Mar-88  Robert Baron (rvb) at Carnegie-Mellon University
#	Add macros VOLATILE and FORCE_VOLATILE as per change in
#	conf/files.<machine> file:
#	VOLATILE	is included if the file contains the ansi C
#			 volatile keyword
#	FORCE_VOLATILE	is included if the file has volatile memory 
#			references, but does not use declare them
#			correctly.
#	(also see comment in config/mkmakefile.c)
#
# 29-Feb-88  Robert Baron (rvb) at Carnegie-Mellon University
#	Add VOLATILE macro which is fed to the preprocessor to macro define
#	the "keyword" volatile to an empty string.  On gcc builds, the
#	local Makefile will define VOLATILE= which lets the volatile
#	definitions show thru.
#
#  6-Jan-88  Michael Young (mwyoung) at Carnegie-Mellon University
#	Change references from h/ to sys/.
#	Remove all but the most pertinent history.
#
# 15-Dec-87  Robert Baron (rvb) at Carnegie-Mellon University
#	Add rules to profile a system as it is build.  The target is
#	gprof.
#
# 09-Nov-87  Mike Accetta (mja) at Carnegie-Mellon University
#	Update LDDEPS to include remaining files used by .swap.sys rule
#	in order to work with RCS; add CFILES dependency to "tags"
#	rule;  added new SYSDEPS definition;  change to create
#	symbols.sort in build directory;  fix to use explicit names in
#	version files to work with RCS;  add new "checkout" rule to
#	permit manual extraction of files from RCS when the
#	dependencies aren't current;  added KCC and KCPP definitions
#	for compiling kernel modules to clear the default search list
#	to prevent accidental inclusion of external include files
#	(especially important when working with header files in RCS
#	where this can easily occur from a missing dependency and a
#	checked-in source).
#	[ V5.1(XF21) ]
#
# 24-Oct-87  David Black (dlb) at Carnegie-Mellon University
#	Name version files explicitly to avoid .BAK .CKP etc.
#
# 10-Oct-87  Mike Accetta (mja) at Carnegie-Mellon University
#	Updated to pass all four version component files to the
#	"newvers.sh" script (which now includes them as kernel
#	variables and creates a version suffix) and changed SYS_RULE_4
#	to also link kernel images with the version suffix provided by
#	this script;  corrected "clean" rule to use new "LOAD" symbol
#	(provided by the "config" program) to remove all configured
#	kernel images related files;  revised symbols.sort rule to
#	use a new MACHINEDIR variable so that it can be overridden
#	for use with directories other than ../machine
#	[ V5.1(XF18) ]
#
# 11-Mar-87  Mike Accetta (mja) at Carnegie-Mellon University
#	Flushed all the "features.h" stuff since this is now a machine
#	independent file.  The equivalent function is now performed by
#	the "doconf" script if an appropriate features file exists in
#	the "machine" directory.
#	[ V5.1(F6) ]
#
# 19-Jan-87  Mike Accetta (mja) at Carnegie-Mellon University
#	Created (from old Makefile.vax).
#	[ V5.1(F1) ]
#
# 01-Oct-86  Mike Accetta (mja) at Carnegie-Mellon University
#	Reorganized to support simplified config program:
#	- COPTS_P variable defines the options used differently when
#	  compiling profiled kernels
#	- LDOBJS is the set of special objects used by the kernel load(s)
#	- LDDEPS is the set of dependencies for the kernel load(s)
#	- SWAPDEPS is the set of dependencies for the swapping module(s)
#	- Kernel configurations are built from a default rule defined here
#	  instead of inside config;  an artificial .swap.sys rule is used 
#	  to trigger this for each swap configuration
#	- Standard rules for building objects in the various normal, driver,
#	  and profiling cases are also defined here instead of inside config.
#	
#	Removed special rules for param.c and replaced PARAM variable
#	with include of new "confdep.h" file now generated by config;
#	also changed ioconf.c to use standard rules.
#	
#	Revised version number processing to eliminate newvers.c program and
#	only increment the version number as part of the archival process
#       rather than on every build.
#
# 18-Apr-86  Robert V. Baron (rvb) at Carnegie-Mellon University
#	Introduce new make depend stuff.
#

#
# Copyright (c) 1980, 1986 Regents of the University of California.
# All rights reserved.  The Berkeley software License Agreement
# specifies the terms and conditions for redistribution.
#

#
#  This must be here before any rules are possibly defined by the
#  machine dependent makefile fragment so that a plain "make" command
#  always works.  The config program will emit an appropriate rule to
#  cause "all" to depend on every kernel configuration it generates.
#

default: all

#
#  In order to move the link commands out of config and back into the
#  template makefile, config has been changed to emit a dendency rule
#  of the form *vmunix.sys: *vmunix.swap for each configuration so that
#  the common commands for building each configuration can be placed
#  directly in the template in the default rule for the .sys.swap
#  dependency.
#
.SUFFIXES: .swap .sys

#
#  Make sure we don't remove this by accident if interrupted at the wrong
#  time.
#
.PRECIOUS: Makefile


#
#  Compilation components
#
CC=	cc
CPP=	${CC} -ES
C2=	/lib/c2
LD=	ld
MD=	/usr/mach/bin/md
ENCODE=	uuencode
DECODE=	uudecode

KCC=	${CC}
KCPP=	${KCC} -ES

#
#  This changed in the 4.3 CPP from .n to .d
#
MD_SUFFIX=d

#
#  Pre-processor environment
#
DEPENDS=  -MD
INCLUDES=
DEFINES= -DKERNEL -DMACH_IPC_COMPAT=0 $(VOLATILE)
ALLOPTS= ${INCLUDES} ${IDENT} ${DEFINES}
LINTOPTS=${ALLOPTS}

#
#  Common C-compilation flags
#
COPTS_P=${DEPENDS} ${ALLOPTS}
COPTS=	${COPTS_P}
CFLAGS=	-O ${COPTS}

#
#  Common assembly flags
#
SFLAGS=	${DEPENDS} ${INCLUDES} ${IDENT} ${DEFINES} -DASSEMBLER


#
#  Path name of the version identification file.
#
FEATURES=$(SOURCE_DIR)/machine/FEATURES.h
VERSION_FILES= \
	$(SOURCE_DIR)/conf/version.major \
	$(SOURCE_DIR)/conf/version.minor \
	$(SOURCE_DIR)/conf/version.variant \
	$(SOURCE_DIR)/conf/version.edit \
	$(SOURCE_DIR)/conf/version.patch

#
#  LDOBJS is the set of object files which comprise the kernel.
#  It is used both in the dependency list for each *vmunix.swap
#  rule emitted by config and also in the .sys.swap rule
#  below which links the kernel from these objects.
#  
#  LDOBJS_PREFIX and LDOBJS_SUFFIX are defined in the machine
#  dependent Makefile (if necessary).
#
LDOBJS=${LDOBJS_PREFIX} ${OBJS} ${LDOBJS_SUFFIX}

#
#  LDDEPS is the set of extra dependencies associated with each
#  *vmunix.swap rule (in addition to $LDOBJS and the swap*.o file).
#
#  LDDEPS_PREFIX is defined in the machine dependent Makefile
#  (if necessary).
#
LDDEPS=${LDDEPS_PREFIX} ${VERSION_FILES} \
	$(SOURCE_DIR)/conf/newvers.sh $(SOURCE_DIR)/conf/copyright symbols.sort

#
#  PRELDDEPS is another set of extra dependencies associated with each
#  *vmunix.swap rule (in addition to $LDOBJS and the swap*.o file).
#  It is defined in the machine dependent Makefile (if necessary).
#
#  The generated rule looks like
#	vmunix.sys : ${PRELDDEPS} ${LDOBJS} ${LDDEPS}
#

#
#  SWAPDEPS is the set of extra dependencies associated with each
#  swap*.o rule emitted by config (in addition to the
#  ../machine/swap*.c file).
#
#  SWAPDEPS_PREFIX is defined in the machine dependent Makefile
#  (if necessary).
#
SWAPDEPS=${SWAPDEPS_PREFIX} 

#
#  SYSDEPS is the set of extra dependencies associated with each
#  *vmunix rule (in addition to *vmunix.sys).
#
#  SYSDEPS_PREFIX is defined in the machine dependent Makefile
#  (if necessary).
#
SYSDEPS=${SYSDEPS_PREFIX}



#
#  Compilation rules to generate *vmunix from *vmunix.sys
#
SYS_RULE_1=@eval `awk 'NR==1{S=$$1;next;}\
END {\
  C = "ln $@.sys $@";\
  if (S != "") {\
    C = C "; ln $@ $@" S; \
    printf "rm -f $@%s; ", S; \
  }\
  printf "echo \"%s\"; %s\n", C, C; \
}' vers.suffix`
SYS_RULE_2=
SYS_RULE_3=
SYS_RULE_4=

#
#  Things to be done just before exiting
#
EXIT_RULE=${MD} -u Makedep -f -d `ls *.${MD_SUFFIX}`

#
# Compilation rules to generate .o from .b
#
B_RULE_1A=rm -f $*.o; ${DECODE} 
B_RULE_1B=$*.b

#
# Compilation rules to generate .o from .o
#
O_RULE_1A=rm -f $*.o; cp 
O_RULE_1B=$*.o .

#
# Compilation rules to generate .o from .s
#
S_RULE_1A=${KCPP} ${SFLAGS} 
S_RULE_1B=$*.s >$*.i 
S_RULE_2=${AS} -o $*.o $*.i
S_RULE_3=rm -f $*.i

#
# Compilation rules to generate .o from .c for normal files
#
C_RULE_1A=${KCC} -c -O ${COPTS} 
C_RULE_1B=$*.c
C_RULE_2=
C_RULE_3=
C_RULE_4=

#
# Compilation rules to generate .o from .c for driver files
#
C_RULE_1A_D=${C_RULE_1A}
C_RULE_1B_D=${C_RULE_1B}
C_RULE_2_D=${C_RULE_2}
C_RULE_3_D=${C_RULE_3}
C_RULE_4_D=${C_RULE_4}

#
# Compilation rules to generate .o from .c for profiling routine files
#
C_RULE_1A_P=${KCC} -c -S ${COPTS_P} 
C_RULE_1B_P=${C_RULE_1B}
C_RULE_2_P=ex - $*.s < ${GPROF.EX}
C_RULE_3_P=${AS} -o $*.o $*.s
C_RULE_4_P=rm -f $*.s



gprof: kgmon_on all kgmon_off

kgmon_on:
	kgmon -r -b

kgmon_off:
	kgmon -h -p
	gprof /mach >GPROF


#
#  These macros are filled in by the config program depending on the
#  current configuration.  The MACHDEP macro is replaced by the
#  contents of the machine dependent makefile template and the others
#  are replaced by the corresponding symbol definitions for the
#  configuration.
#

%OBJS

%CFILES

%SFILES

%BFILES

%ORDERED

%MACHDEP


#
#  Default rule used to build a *vmunix.sys configuration from the
#  object list and a particular *vmunix.swap module.  The *vmunix.swap
#  module is a normal object file compiled from the appropriate swap*.c
#  file and then copied to the *vmunix.swap name to trigger the full
#  kernel link using this default rule.
#

.swap.sys:
	@/bin/sh $(SOURCE_DIR)/conf/newvers.sh \
			 $(SOURCE_DIR)/conf/copyright \
			`cat ${VERSION_FILES}`
	@${KCC} -c vers.c
	@rm -f $* $*.sys
	@echo loading $*.sys
	@${LD} ${LDFLAGS} ${LDOBJS} vers.o $*.swap ${LIBS}
	@echo stripping $*.sys
	@-xstrip a.out
	@-size a.out
	@chmod 755 a.out
	@mv a.out $*.sys



#
#  OBJSDEPS is the set of files (defined in the machine dependent
#  template if necessary) which all objects depend on (such as an
#  in-line assembler expansion filter
#

${OBJS}: ${OBJSDEPS}



#
#  This macro is replaced by three rules per configuration, plus a
#  final definition for the LOAD symbol consisting of all configuration
#  names and a dependency of "all" on this symbol (so that the
#  "default" rule above will build everything).  The three rules in
#  each configuration are:
#
#  - a *vmunix from *vmunix.sys dependency using the SYS_RULE_* rules,
#  - a *vmunix.swap from LDDEPS, swap*.o, and LDDEPS dependency that
#    simply copies the swap file to the target name, and
#  - a swap*.o from swap*.c and SWAPDEPS dependency using the C_RULE_* rules.
#

%LOAD



#
#  Rules for components which are not part of the kernel proper or that
#  need to be built in a special manner.
#

genassym.o: $(SOURCE_DIR)/machine/genassym.c
	${KCC} -c ${COPTS_P} $(SOURCE_DIR)/machine/genassym.c

assym.s: genassym.o
	${KCC} genassym.o
	./a.out > assym.s; rm -f a.out

locore.o: assym.s ${LOCORE_HEADS}

#
#  Mach IPC-based interfaces
#

#  Explicit dependencies on generated files,
#  to ensure that Mig has been run by the time
#  these files are compiled.

bsd_server.o: uxkern/bsd_1_server.c uxkern/bsd_types_gen.h \
	uxkern/bsd_2_user.c uxkern/bsd_2_server.c

bsd_server_side.o: uxkern/bsd_types_gen.h

inode_pager.o: mach/memory_object_server.c

misc.o: mach/default_pager_object_user.c

mach_signal.o: uxkern/bsd_2.h

#  The Mig-generated files go into subdirectories.
#  These macros create the subdirectories as they are needed.

MAKE_MACH = [ -d mach ] || mkdir mach
MAKE_UXKERN = [ -d uxkern ] || mkdir uxkern

MIG = mig
MIGFLAGS = -DMACH_IPC_COMPAT=0 -I.

BSD_1_FILES = uxkern/bsd_1_server.c

$(BSD_1_FILES): uxkern/bsd_types_gen.h $(SOURCE_DIR)/uxkern/bsd_1.defs
	-$(MAKE_UXKERN)
	$(MIG) -MD $(MIGFLAGS) -header /dev/null -user /dev/null -server uxkern/bsd_1_server.c $(SOURCE_DIR)/uxkern/bsd_1.defs

BSD_2_FILES = uxkern/bsd_2.h uxkern/bsd_2_user.c uxkern/bsd_2_server.c

$(BSD_2_FILES): $(SOURCE_DIR)/uxkern/bsd_2.defs
	-$(MAKE_UXKERN)
	$(MIG) -MD $(MIGFLAGS) -header uxkern/bsd_2.h -user uxkern/bsd_2_user.c -server uxkern/bsd_2_server.c $(SOURCE_DIR)/uxkern/bsd_2.defs

uxkern/bsd_types_gen.h : bsd_types_gen
	-$(MAKE_UXKERN)
	./bsd_types_gen > uxkern/bsd_types_gen.h

bsd_types_gen : bsd_types_gen.o
	${CC} -o bsd_types_gen bsd_types_gen.o

bsd_types_gen.o : $(SOURCE_DIR)/uxkern/bsd_types_gen.c
	${CC} -c ${CFLAGS} $(SOURCE_DIR)/uxkern/bsd_types_gen.c

MEMOBJ_FILES = mach/memory_object_server.c

$(MEMOBJ_FILES): $(MKINC)/mach/memory_object.defs
	-$(MAKE_MACH)
	$(MIG) -MD $(MIGFLAGS) -header /dev/null -user /dev/null -server mach/memory_object_server.c $(MKINC)/mach/memory_object.defs

MEMOBJ_DEFAULT_FILES = mach/memory_object_default_server.c

$(MEMOBJ_DEFAULT_FILES): $(MKINC)/mach/memory_object_default.defs
	-$(MAKE_MACH)
	$(MIG) -MD $(MIGFLAGS) -header /dev/null -user /dev/null -server mach/memory_object_default_server.c $(MKINC)/mach/memory_object_default.defs

DEFAULT_PAGER_OBJECT_FILES = mach/default_pager_object_user.c

$(DEFAULT_PAGER_OBJECT_FILES): $(MKINC)/mach/default_pager_object.defs
	-$(MAKE_MACH)
	$(MIG) -MD $(MIGFLAGS) -header mach/default_pager_object.h -user mach/default_pager_object_user.c -server /dev/null $(MKINC)/mach/default_pager_object.defs

#
#  Update the Makefile when any dependency files exist rather than only
#  when they are newer than the makefile (since it often gets touched
#  during reconfigurations when dependency files have yet to be
#  integrated).  The makefile is copied before doing any potential
#  integration so that the new and old versions can be compared when
#  done (by the SYS_RULE_* rules) to prevent re-building things when no
#  dependencies change.
#
#  N.B.  There is always an empty artificial dependency file M.d
#  (created by config) which will never be integrated and simply
#  prevents the wild-card expansion below from failing.
#
#  The default exit rule now brings the Makefile up to date, so it
#  shouldn't be necessary to execute this rule manually.
#

Makefile: *.${MD_SUFFIX}
	${EXIT_RULE}

.EXIT:
	${EXIT_RULE}

depend: 
	@echo you don\'t make depend any more.



#
#  Permit manually forced checkout of modules when the dependency
#  information is not current.
#

checkout:	${USE}



#
#  Clean up the current build directory.
#

clean:
	@for f in ${LOAD}; do echo rm -f $$f $$f.* && rm -f $$f $$f.*; done
	rm -f eddep tags *.o locore.i \
		migfiles \
		errs linterrs makelinks *.log *LOG* ${CLEAN_EXTRA}


#
#  Run "lint" on the current build directory.  This will often be done
#  with a special configuration that defines the union of all options
#  used in all configurations so that all combinations are checked.
#  The LINTFILES variable allows lint to be easily run on an optional
#  sub-set of files specified on the make command line when this is
#  desired.
#

LINTFILES=$(SOURCE_DIR)/machine/Locore.c ${CFILES} $(SOURCE_DIR)/machine/swapgeneric.c ioconf.c

lint:	ALWAYS assym.s
	@lint -n -hbxn -DGENERIC ${LINTOPTS} ${LINTFILES} | \
	    egrep -v 'struct/union .* never defined' | \
	    egrep -v 'possible pointer alignment problem'

ALWAYS:

MACHINEDIR=$(SOURCE_DIR)/machine

symbols.sort: ${MACHINEDIR}/symbols.raw
	-grep -v '^#' ${MACHINEDIR}/symbols.raw \
	    | sed 's/^	//' | sort -u > symbols.tmp
	-mv -f symbols.tmp symbols.sort

#
#  This macro is replaced by the set of rules which build everything in
#  OBJS.  The extra dependencies for each object file are inserted
#  following this by md which uses the keys on the sentinel line
#  below.
#

%RULES

-include Makedep
