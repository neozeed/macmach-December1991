/* 
 * Mach Operating System
 * Copyright (c) 1991 Carnegie Mellon University
 * All Rights Reserved.
 * 
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
 * ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 * 
 *  Software Distribution Coordinator  or  Software.Distribution@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 * 
 * any improvements or extensions that they make and grant Carnegie Mellon
 * the rights to redistribute these changes.
 */
/*
 * HISTORY
 * $Log:	mach_norma.defs,v $
 * Revision 2.4  91/08/28  11:15:08  jsb
 * 	Added KERNEL_USER definitions.
 * 	Removed norma_set_task_server.
 * 	Added task_create_remote, norma_copy_create.
 * 	[91/08/15  13:28:27  jsb]
 * 
 * Revision 2.3  91/08/03  18:19:02  jsb
 * 	Removed norma_get_{host,host_priv,device}_port;
 * 	Use norma_{get,set}_special_port instead.
 * 	[91/07/25  07:51:11  jsb]
 * 
 * Revision 2.2  91/06/06  17:07:57  jsb
 * 	First checkin.
 * 	[91/05/25  10:37:22  jsb]
 * 
 */

subsystem
#if	KERNEL_USER
	  KernelUser
#endif	KERNEL_USER
#if	KERNEL_SERVER
	  KernelServer
#endif	KERNEL_SERVER
		       mach_norma 555000;
#ifdef	KERNEL_USER
userprefix r_;
#endif	KERNEL_USER

#include <mach/std_types.defs>
#include <mach/mach_types.defs>

routine task_create_local(
		target_task	: task_t;
		inherit_memory	: boolean_t;
	out	child_task	: task_t);

skip;

routine norma_node_self(
		host		: host_t;
	out	node		: int);

routine norma_task_allocate(
		host_priv	: host_priv_t;
	out	task		: task_t);

/*
 *	Returns the current value of all inherited ports in task.
 */
routine task_get_inherited_ports(
		task		: task_t;
	out	port0		: mach_port_t;
	out	port1		: mach_port_t;
	out	port2		: mach_port_t;
	out	port3		: mach_port_t;
	out	exception	: mach_port_t;
	out	bootstrap	: mach_port_t);

/*
 *	Returns the current value of all inherited ports in task.
 */
routine task_set_inherited_ports(
		task		: task_t;
		port0		: mach_port_t;
		port1		: mach_port_t;
		port2		: mach_port_t;
		port3		: mach_port_t;
		exception	: mach_port_t;
		bootstrap	: mach_port_t);

routine task_create_remote(
		target_task	: task_t;
		inherit_memory	: boolean_t;
		child_node	: int;
	out	child_task	: task_t);

skip;

skip;

routine	norma_get_special_port(
		host_priv	: host_priv_t;
		node		: int;
		which		: int;
	out	port		: mach_port_t);

routine	norma_set_special_port(
		host_priv	: host_priv_t;
		node		: int;
		which		: int;
		port		: mach_port_t);

routine norma_copy_create(
		task		: vm_task_t;
		start		: vm_offset_t;
		size		: vm_size_t;
	out	memory_object	: mach_port_make_send_t);
